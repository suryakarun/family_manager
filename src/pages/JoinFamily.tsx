import { useEffect, useState } from "react";
import { useLocation, useNavigate, useParams } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { useToast } from "@/components/ui/use-toast";
import { Users, CheckCircle, XCircle, Loader2 } from "lucide-react";

const JoinFamily = () => {
  const { familyId: familyIdFromUrl, inviteToken } = useParams<{
    familyId?: string;
    inviteToken?: string;
  }>();

  const [loading, setLoading] = useState(true);
  const [familyName, setFamilyName] = useState("");
  const [familyId, setFamilyId] = useState<string | null>(
    familyIdFromUrl ?? null
  );
  const [error, setError] = useState("");
  const [joined, setJoined] = useState(false);

  const navigate = useNavigate();
  const location = useLocation();
  const { toast } = useToast();

  useEffect(() => {
    if (!inviteToken) {
      setError("Invalid invite link - missing invite token");
      setLoading(false);
      return;
    }
    validateInviteAndFetchFamily();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [inviteToken, familyIdFromUrl]);

  const validateInviteAndFetchFamily = async () => {
    try {
      // Validate token and fetch family via RPC
      const { data, error } = await (supabase as any).rpc(
        "get_family_by_invite_token",
        { token_param: inviteToken }
      );
      if (error) throw error;

      if (!data || data.length === 0) {
        setError("Invalid or expired invite link");
        setLoading(false);
        return;
      }

      const fam = data[0];

      // If URL has familyId, ensure it matches; otherwise adopt from RPC
      if (familyIdFromUrl && fam.family_id !== familyIdFromUrl) {
        setError("Invalid invite link - family mismatch");
        setLoading(false);
        return;
      }

      setFamilyId(fam.family_id);
      setFamilyName(fam.family_name || "this family");
      setLoading(false);
    } catch (err) {
      console.error("Error validating invite:", err);
      setError("Failed to validate invite link");
      setLoading(false);
    }
  };

  const joinFamily = async () => {
    if (!familyId) return;

    setLoading(true);
    try {
      const {
        data: { user },
      } = await supabase.auth.getUser();

      if (!user) {
        // preserve full URL to return after auth
        sessionStorage.setItem(
          "pendingInvite",
          location.pathname + location.search
        );
        navigate("/auth");
        return;
      }

      // Already a member?
      const { data: existing } = await supabase
        .from("family_members")
        .select("id")
        .eq("family_id", familyId)
        .eq("user_id", user.id)
        .maybeSingle();

      if (existing) {
        toast({
          title: "Already a member",
          description: "You're already part of this family",
        });
        navigate("/dashboard");
        return;
      }

      // Add as member
      const { error } = await supabase.from("family_members").insert({
        family_id: familyId,
        user_id: user.id,
        role: "member",
        status: "active",
      });
      if (error) throw error;

      setJoined(true);
      toast({ title: "Success!", description: `You've joined ${familyName}` });

      setTimeout(() => navigate("/dashboard"), 1500);
    } catch (err: any) {
      toast({
        title: "Error",
        description: err.message || "Failed to join family",
        variant: "destructive",
      });
      setLoading(false);
    }
  };

  if (loading && !error) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-soft">
        <div className="flex flex-col items-center gap-4">
          <Loader2 className="h-12 w-12 animate-spin text-primary" />
          <p className="text-muted-foreground">Validating invite link...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-soft p-4">
      <Card className="w-full max-w-md shadow-elegant">
        {error ? (
          <>
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 bg-destructive/10 p-3 rounded-full w-fit">
                <XCircle className="h-12 w-12 text-destructive" />
              </div>
              <CardTitle className="text-2xl">Invalid Invite</CardTitle>
              <CardDescription>{error}</CardDescription>
            </CardHeader>
            <CardContent className="space-y-3">
              <p className="text-sm text-muted-foreground text-center">
                This invite link may have expired or been regenerated by the
                family owner.
              </p>
              <Button onClick={() => navigate("/auth")} className="w-full">
                Go to Sign In
              </Button>
            </CardContent>
          </>
        ) : joined ? (
          <>
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 bg-success/10 p-3 rounded-full w-fit">
                <CheckCircle className="h-12 w-12 text-success" />
              </div>
              <CardTitle className="text-2xl">Welcome!</CardTitle>
              <CardDescription>
                You've successfully joined {familyName}
              </CardDescription>
            </CardHeader>
            <CardContent>
              <p className="text-center text-sm text-muted-foreground">
                Redirecting to dashboard...
              </p>
            </CardContent>
          </>
        ) : (
          <>
            <CardHeader className="text-center">
              <div className="mx-auto mb-4 bg-primary/10 p-3 rounded-full w-fit">
                <Users className="h-12 w-12 text-primary" />
              </div>
              <CardTitle className="text-2xl">Join Family</CardTitle>
              <CardDescription>
                You've been invited to join <strong>{familyName}</strong>
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="bg-muted p-4 rounded-lg">
                <p className="text-sm text-muted-foreground">
                  ðŸ”’ This invite is specific to <strong>{familyName}</strong>.
                  You'll only see this family's events and calendar.
                </p>
              </div>
              <p className="text-sm text-muted-foreground text-center">
                By joining, you'll be able to view and manage shared family
                events
              </p>
              <Button onClick={joinFamily} disabled={loading} className="w-full">
                {loading ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Joining...
                  </>
                ) : (
                  "Join Family"
                )}
              </Button>
              <Button
                onClick={() => navigate("/auth")}
                variant="outline"
                className="w-full"
              >
                Cancel
              </Button>
            </CardContent>
          </>
        )}
      </Card>
    </div>
  );
};

export default JoinFamily;
